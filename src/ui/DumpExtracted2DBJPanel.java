/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import dao.CSVWriter;
import dao.DBConnector;
import java.awt.Color;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import model.FileFolderIterator;
import model.OrignalTextExtractor;
import model.RecordFileLoader;

/**
 *
 * @author lance
 */
public class DumpExtracted2DBJPanel extends javax.swing.JPanel 
{
    private JFileChooser chooser;
    private MainFrame parentMainFrame;
    private String targetPath;
    private String token;
    private int year;
    private String group;
    /**
     * Creates new form DumpExtracted2DBJPanel
     */
    public DumpExtracted2DBJPanel(MainFrame mainFrame) 
    {
        parentMainFrame = mainFrame;
        initComponents();
        int year = 0;
        group = new String();
        parentMainFrame.insertTextPane("Dump Extracted Paragraph 2 DB Panel initiated!\r\n",Color.BLUE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saveAsJButton = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        selectFolderJButton = new javax.swing.JButton();
        dump2DBJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        tokenJTextField = new javax.swing.JTextField();
        documentJRadioButton = new javax.swing.JRadioButton();
        paragraphJRadioButton = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        groupJTextField = new javax.swing.JTextField();
        yearJComboBox = new javax.swing.JComboBox();

        saveAsJButton.setText("Save As..");
        saveAsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsJButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(documentJRadioButton);
        buttonGroup1.add(paragraphJRadioButton);

        jLabel1.setText("Please select target file folder and make sure there are only the files with names company_name.txt in that folder");

        selectFolderJButton.setText("Select Folder");
        selectFolderJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFolderJButtonActionPerformed(evt);
            }
        });

        dump2DBJButton.setText("Dump 2 DB!");
        dump2DBJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dump2DBJButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Please name a token:");

        documentJRadioButton.setText("entire document downloaded from URL");

        paragraphJRadioButton.setText("extracted paragraph");

        jLabel3.setText("year:");

        jLabel4.setText("group*:");

        yearJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2008", "2009", "2010", "2011","2012", "2013", "2014", "2015", "2016" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(selectFolderJButton)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(documentJRadioButton)
                                .addGap(30, 30, 30)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yearJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(groupJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(paragraphJRadioButton)
                                .addGap(71, 71, 71)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tokenJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(dump2DBJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(selectFolderJButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paragraphJRadioButton)
                    .addComponent(jLabel2)
                    .addComponent(tokenJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(documentJRadioButton)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(groupJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(dump2DBJButton)
                .addContainerGap(142, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saveAsJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsJButtonActionPerformed
        
    }//GEN-LAST:event_saveAsJButtonActionPerformed

    private void dump2DBJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dump2DBJButtonActionPerformed
        String checkFeedback = inputCheck();// check if the input is valid. Return reason if not or "" if valid
        if(checkFeedback.length()!=0)//error message returned in checkFeedback string
        {
            this.parentMainFrame.insertTextPane(checkFeedback+"\r\n", Color.RED);
        }
        else//input check okay, call the OrignalTextExtractor to extract data from DB
        {
            this.parentMainFrame.insertTextPane("Input check passed!"+"\r\n", Color.black); 
            ArrayList<String> companyNames = new ArrayList();
            try 
            {
                companyNames = FileFolderIterator.readCompanyNames(targetPath);
                this.parentMainFrame.insertTextPane("The number of companies is:"+companyNames.size()+"\r\n", Color.black);
                for(int j=0;j<companyNames.size();j++)//每次循环读一个company的所有url
                {
                    String path = targetPath+"\\"+companyNames.get(j)+".txt";

                    RecordFileLoader.Read(path,companyNames.get(j),token,year,group);
                    this.parentMainFrame.insertTextPane("Content dumped into DB for: "+companyNames.get(j)+"\r\n", Color.black);
                    
                }
            } 
            catch (FileNotFoundException ex) 
            {
                ex.printStackTrace(); 
            }
            catch (IOException ex) 
            {
                ex.printStackTrace();
            }
            
        } 
    }//GEN-LAST:event_dump2DBJButtonActionPerformed

    private void selectFolderJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFolderJButtonActionPerformed
        chooser = new JFileChooser(); 
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Please choose folder:");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        //    
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) 
        { 
          targetPath=chooser.getSelectedFile().toString();
          this.parentMainFrame.insertTextPane("target folder:"+targetPath+"\r\n", Color.black);
        }
        else 
        {
          this.parentMainFrame.insertTextPane("No target folder specified! Current target folder in system is:"+targetPath+"\r\n", Color.RED);
        }     
    }//GEN-LAST:event_selectFolderJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton documentJRadioButton;
    private javax.swing.JButton dump2DBJButton;
    private javax.swing.JTextField groupJTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JRadioButton paragraphJRadioButton;
    private javax.swing.JButton saveAsJButton;
    private javax.swing.JButton selectFolderJButton;
    private javax.swing.JTextField tokenJTextField;
    private javax.swing.JComboBox yearJComboBox;
    // End of variables declaration//GEN-END:variables

    private String inputCheck() 
    {
        //check if target path is selected
        if(targetPath==null||targetPath.length()==0)
        {
            return "please select target folder!";
        }
        
        if(documentJRadioButton.isSelected())//download entire ducoment.
        {
            token=tokenJTextField.getText();
            //token should be empty
            if(!token.equals(""))
            {
                return "if 'entire document' is select, token should be empty!";
            }
            if(yearJComboBox.getSelectedItem().toString().length()==0)
            {
                return "Please input proper year!";
            }
            this.year= Integer.parseInt((String)yearJComboBox.getSelectedItem());
            this.group=this.groupJTextField.getText();
            return "";
        }
        else if(paragraphJRadioButton.isSelected())//extracted paragraph
        {
            token=tokenJTextField.getText();
            if(tokenExist(token)==true)
            {
                return "this token exists in DB!";
            }
            
            
            return "";
        }
        else
        {
            return "Please select one radio button";
        }
    }

    private boolean tokenExist(String token) 
    {
         DBConnector dbConnector = new DBConnector();
         String sql = "select count(*) as num from extracted_link_content where token='"+token+"';";
         ResultSet resultSet = dbConnector.executeQuerry(sql);
        try 
        {
            resultSet.next();
            int num = Integer.parseInt(resultSet.getString("num"));
            if(num==0)
            {
                return false;
            }
            else
            {
                return true;
            }
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(DumpExtracted2DBJPanel.class.getName()).log(Level.SEVERE, null, ex);
            return true;
        }
    }
}
