/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import dao.CSVReader;
import dao.CSVWriter;
import java.awt.Color;
import java.io.File;
import java.util.ArrayList;
import javax.swing.filechooser.FileFilter;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import model.OrignalTextExtractor;
import ui.ExtensionFileFilter;

/**
 *
 * @author lance
 */
public class ContentSearchJPanel extends javax.swing.JPanel {
    private MainFrame parentMainFrame;
    private DefaultTableModel model;
    private JFileChooser chooser;
    private FileFilter filter;
    private String targetSaveAsPath;
    private String targetSaveAsFileName;
    private String targetDicPath;
    private String targetDicsFileName;
    private ArrayList<String> keywords;
    private ArrayList<String> orKeywords;
    private ArrayList<String> excludeWords;
    private int yearFrom;
    private int yearTo;
    private int numSentence;

    /**
     * Creates new form ContentSearchJPanel
     */
    public ContentSearchJPanel(MainFrame mainFrame) 
    {
        parentMainFrame = mainFrame;
        keywords= new ArrayList();
        orKeywords= new ArrayList();
        excludeWords= new ArrayList();
        initComponents();
        parentMainFrame.insertTextPane("Content Search Panel initiated!\r\n",Color.BLUE);
    }
    
    private void IniteSaveAsFileChooser()
    {
        targetSaveAsPath=null;
        targetSaveAsFileName=null;
        //initialize file chooser    
        chooser = new JFileChooser(".");
        chooser.setDialogTitle("Please select the path and add file name");
        //set default path to desktop
        FileSystemView fsv = FileSystemView.getFileSystemView();
        chooser.setCurrentDirectory(fsv.getHomeDirectory());
        //create filter
        filter = new ExtensionFileFilter("csv", new String[] { "csv","CSV" });
        chooser.setFileFilter(filter);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) 
        { 
            targetSaveAsPath=chooser.getCurrentDirectory().toString();
            targetSaveAsFileName=chooser.getSelectedFile().toString();
            this.parentMainFrame.insertTextPane("target file:"+targetSaveAsFileName+"\r\n", Color.black);
            this.filePathJLable.setText(targetSaveAsFileName);
        }
        else 
        {
            this.parentMainFrame.insertTextPane("No target file! Current target file in system is:"+targetSaveAsFileName+"\r\n", Color.RED);
            this.filePathJLable.setText(targetSaveAsFileName);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        AndJTextField = new javax.swing.JTextField();
        OrJTextField1 = new javax.swing.JTextField();
        NotTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        wholeDocumentJRadioButton = new javax.swing.JRadioButton();
        numSentenceJRadioButton = new javax.swing.JRadioButton();
        jTextField7 = new javax.swing.JTextField();
        singleSentenceJRadioButton = new javax.swing.JRadioButton();
        saveAsJButton = new javax.swing.JButton();
        filePathJLable = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        runJButton = new javax.swing.JButton();
        importDicJButton = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        buttonGroup1.add(wholeDocumentJRadioButton);
        buttonGroup1.add(numSentenceJRadioButton);
        buttonGroup1.add(this.singleSentenceJRadioButton);

        jLabel2.setText("jLabel2");

        jLabel1.setText("Specify your keywords:");

        jLabel3.setText("or");

        jLabel5.setText("not");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2007", "2008", "2009", "2010", "2011", "2012", "2013" }));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2007", "2008", "2009", "2010", "2011", "2012", "2013" }));

        jLabel7.setText("Time from:");

        jLabel8.setText("to");

        jLabel9.setText("Content Selection:");

        wholeDocumentJRadioButton.setText("export whole matching document");
        wholeDocumentJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wholeDocumentJRadioButtonActionPerformed(evt);
            }
        });

        numSentenceJRadioButton.setText("export context sentence #:");

        singleSentenceJRadioButton.setText("export hitted sentence only");
        singleSentenceJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleSentenceJRadioButtonActionPerformed(evt);
            }
        });

        saveAsJButton.setText("Save As..");
        saveAsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsJButtonActionPerformed(evt);
            }
        });

        filePathJLable.setText("You haven't set the exported file path yet");

        jLabel4.setText("(Seperate with comma)");

        runJButton.setText("Querry& Export!");
        runJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runJButtonActionPerformed(evt);
            }
        });

        importDicJButton.setText("Import Dictionary");
        importDicJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importDicJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5)))
                            .addComponent(jLabel7)
                            .addComponent(jLabel9)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(singleSentenceJRadioButton)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(numSentenceJRadioButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 171, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(NotTextField)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(AndJTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(OrJTextField1, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(wholeDocumentJRadioButton, javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(jLabel8)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(importDicJButton)))
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(saveAsJButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(filePathJLable))
                            .addComponent(runJButton))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AndJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(OrJTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)))
                            .addComponent(importDicJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NotTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(wholeDocumentJRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numSentenceJRadioButton)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(singleSentenceJRadioButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveAsJButton)
                    .addComponent(filePathJLable))
                .addGap(18, 18, 18)
                .addComponent(runJButton)
                .addContainerGap(48, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void wholeDocumentJRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wholeDocumentJRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wholeDocumentJRadioButtonActionPerformed

    private void singleSentenceJRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleSentenceJRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_singleSentenceJRadioButtonActionPerformed

    private void saveAsJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsJButtonActionPerformed
        IniteSaveAsFileChooser();     //create file chooser and choose path and file name
    }//GEN-LAST:event_saveAsJButtonActionPerformed

    private void runJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runJButtonActionPerformed
        String checkFeedback = inputCheck();// check if the input is valid. Return reason if not or "" if valid
        if(checkFeedback.length()!=0)//error message returned in checkFeedback string
        {
            this.parentMainFrame.insertTextPane(checkFeedback+"\r\n", Color.RED);
        }
        else//input check okay, call the OrignalTextExtractor to extract data from DB
        {
           this.parentMainFrame.insertTextPane("Input check passed!"+"\r\n", Color.black); 
           String flag = checkSelectedRadioButton();
           getKeyWords();
           ArrayList<String> resultSentenceSet = new ArrayList();
           if(AndJTextField.isEnabled()==true)
           {
                resultSentenceSet = OrignalTextExtractor.ExtractContentFromCompanyProfile(yearFrom, yearTo, keywords, orKeywords, excludeWords, flag, numSentence, parentMainFrame,targetSaveAsPath);
           }
           else
           {
                ArrayList<ArrayList<String>> keywordDic = loadQuerryDic();
                resultSentenceSet = OrignalTextExtractor.ExtractContentFromCompanyProfile(yearFrom, yearTo, keywordDic, excludeWords, flag, numSentence, parentMainFrame,targetSaveAsPath);
           }
           if(resultSentenceSet.size()==0)
           {    
               this.parentMainFrame.insertTextPane("No hit for given keyword!\r\n", Color.red);
           }
           else
           {
                //write into CSV
                //each record in resultSentenceSet contains a company name, a url and a set of sentences. 
                for(int i=0;i<resultSentenceSet.size();i++)
                {
                    CSVWriter.Write(targetSaveAsFileName, resultSentenceSet.get(i));
                }
                this.parentMainFrame.insertTextPane("Output has been written to"+targetSaveAsFileName+"\r\n", Color.black);
           }
        }   
        
    }//GEN-LAST:event_runJButtonActionPerformed

    private void importDicJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importDicJButtonActionPerformed
        //if currently no Dic is specified
        if(AndJTextField.isEnabled()==true)
        {
            IniteDicFileChooser();
            if(this.targetDicPath==null||this.targetDicPath.length()!=0)//a Dic is specified
            {
                this.AndJTextField.setEnabled(false);
                this.OrJTextField1.setEnabled(false);
                importDicJButton.setText("Disable Disctionary");
            }
        }
        else
        {
            this.targetDicPath="";
            this.targetDicsFileName="";
            importDicJButton.setText("Import Dictionary");
            this.AndJTextField.setEnabled(true);
            this.OrJTextField1.setEnabled(true);
        }
        
    }//GEN-LAST:event_importDicJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AndJTextField;
    private javax.swing.JTextField NotTextField;
    private javax.swing.JTextField OrJTextField1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel filePathJLable;
    private javax.swing.JButton importDicJButton;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JRadioButton numSentenceJRadioButton;
    private javax.swing.JButton runJButton;
    private javax.swing.JButton saveAsJButton;
    private javax.swing.JRadioButton singleSentenceJRadioButton;
    private javax.swing.JRadioButton wholeDocumentJRadioButton;
    // End of variables declaration//GEN-END:variables

    private String inputCheck() 
    {
        if(AndJTextField.isEnabled()==true&&AndJTextField.getText().length()==0)
        {
            return "Please input keywords!";
        }
        if(AndJTextField.isEnabled()==false&&this.targetDicPath==null)
        {
            return "No dictionary specified!!";
        }
        
        if(jComboBox1.getSelectedItem().toString().length()==0||jComboBox2.getSelectedItem().toString().length()==0)
        {
            return "Please input proper time!";
        }
        this.yearFrom = Integer.parseInt((String)jComboBox1.getSelectedItem());
        this.yearTo = Integer.parseInt((String)jComboBox2.getSelectedItem());
        if(yearFrom >yearTo)
        {
            return "Please input proper time!";
        }
        if(wholeDocumentJRadioButton.isSelected()==false&&numSentenceJRadioButton.isSelected()==false&&singleSentenceJRadioButton.isSelected()==false)
        {
            return "Please select one radio button!";
        }
        if(numSentenceJRadioButton.isSelected()==true)
        {
            String numSentenceInput = jTextField7.getText();
            try{this.numSentence = Integer.parseInt(numSentenceInput);
            }
            catch(NumberFormatException e)
            {
                return "Please input the # of sentence!";
            }
        }
        if(targetSaveAsFileName==null)
        {
            return "Please select target output file!";
        }
               
        return "";
    }

    private String checkSelectedRadioButton() //when this method is called, at least one of the radio button is selected
    {
        if(wholeDocumentJRadioButton.isSelected()==true)
        {
            return "WHOLE";
        }
        else if(numSentenceJRadioButton.isSelected()==true)
        {
            return "NUNSEN";
        }
        else
        {
            return "SINGLE";
        }
    }

    private void getKeyWords() 
    {
        //DO not forget to clear the keywork list!!!
        keywords.clear();
        orKeywords.clear();
        excludeWords.clear();
        String input = AndJTextField.getText();//get input in AndJTextField and split by comma
        String[] temp = input.split(",");
        for(int i=0;i<temp.length;i++)
        {  
            if(temp[i].trim().length()!=0)
            {
                this.keywords.add(temp[i].trim());  
            }  
        } 
        input = OrJTextField1.getText();//get input in OrJTextField1 and split by comma
        temp = input.split(",");
        for(int i=0;i<temp.length;i++)
        {  
            if(temp[i].trim().length()!=0)
            {
                this.orKeywords.add(temp[i].trim());  
            }  
        }
        input = NotTextField.getText().trim();//get input in NotTextField and split by comma
        temp = input.split(",");
        for(int i=0;i<temp.length;i++)
        {  
            if(temp[i].trim().length()!=0)
            {
                this.excludeWords.add(temp[i].trim());  
            }
        }
    }

    private void IniteDicFileChooser()
    {
        targetDicPath=null;
        targetDicsFileName=null;
        //initialize file chooser    
        chooser = new JFileChooser(".");
        chooser.setDialogTitle("Please select the path and add file name");
        //set default path to desktop
        FileSystemView fsv = FileSystemView.getFileSystemView();
        chooser.setCurrentDirectory(fsv.getHomeDirectory());
        //create filter
        filter = new ExtensionFileFilter("csv", new String[] { "csv","CSV" });
        chooser.setFileFilter(filter);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) 
        { 
            targetDicPath=chooser.getCurrentDirectory().toString();
            targetDicsFileName=chooser.getSelectedFile().toString();
            this.parentMainFrame.insertTextPane("Dictionary file:"+targetDicsFileName+"\r\n", Color.black);
        }
        else 
        {
            this.parentMainFrame.insertTextPane("No dictionary file selected!\r\n", Color.RED);
        }
    }
    
    private ArrayList<ArrayList<String>> loadQuerryDic()
    {
        String dicContent = CSVReader.Read(targetDicsFileName);
        String[] lines = dicContent.split("\n");
        ArrayList<ArrayList<String>> result = new ArrayList();
        for(int i=0;i<lines.length;i++)
        {
            String[] words = lines[i].split(",");
            ArrayList<String> unitKeywordSet = new ArrayList();
            for(int j=0;j<words.length;j++)
            {
                if(words[j].trim().length()>0)
                {
                    unitKeywordSet.add(words[j].trim());
                }
            }
            if(unitKeywordSet.size()>0)
            {
                result.add(unitKeywordSet);
            }
        }
        return result;    
    }

}
